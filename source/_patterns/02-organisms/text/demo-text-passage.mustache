<div class="c-text-passage">
        <p>Patterns can be found in <code class="highlighter-rouge">./source/_patterns/</code>. Patterns must be written in the template languages supported by Pattern Lab’s PatternEngines. For PHP the supported PatternEngines are Mustache and Twig. For Node the supported PatternEngines are Mustache and Handlebars.</p>

<h2 id="how-patterns-are-organized">How Patterns Are Organized</h2>

<p>Patterns are organized in a nested folder structure under <code class="highlighter-rouge">./source/_patterns/</code>. This allows the PHP and Node versions of Pattern Lab to automatically find and build assets like the “view all” pages and the drop down navigation. Pattern Lab uses the following organizational structure:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[patternType]/[patternSubtype]/[patternName].[patternExtension]
</code></pre></div></div>

<p>Here are the parts:</p>

<ul>
<li><code class="highlighter-rouge">patternType</code> denotes the overall pattern type. If using Atomic Design this will be something like “atoms” or “molecules” but it can be anything you want. For example, “components” or “elements.”</li>
<li><code class="highlighter-rouge">patternSubtype</code> denotes the sub-type of pattern and is <em>optional</em>. This helps to organize patterns under an overall pattern type in the drop downs in Pattern Lab. For example, a “blocks” pattern subtype under the “molecules” pattern type.</li>
<li><code class="highlighter-rouge">patternName</code> is the name of the pattern. This is used when the pattern is displayed in the drop downs in Pattern Lab.</li>
<li><code class="highlighter-rouge">patternExtension</code> is the file extension that tells the PatternEngine to render the pattern. For example, <code class="highlighter-rouge">.mustache</code>.</li>
</ul>

<p>Dashes (<code class="highlighter-rouge">-</code>) in your pattern types, pattern subtypes or pattern names will be replaced with spaces. For example, if you want a pattern to be displayed in the drop-down as “Hamburger Navigation” and you’re using the Mustache PatternEngine you should name it <code class="highlighter-rouge">hamburger-navigation.mustache</code>.</p>

<h2 id="pattern-type-naming-conventions">Pattern Type Naming Conventions</h2>

<p>You do <strong>not</strong> have to use the Atomic Design naming convention when organizing your patterns. You can name your pattern types whatever you like and use as many or as few as you like. For example, you could use the pattern types Nachos, Tacos, and Burritos instead of Atoms, Molecules, and Organisms.</p>

<h2 id="ordering">Ordering</h2>

<p>By default, pattern types, pattern subtypes and patterns are ordered alphabetically. If you want more control over their ordering please refer to “<a href="/docs/pattern-reorganizing.html">Reorganizing Patterns</a>.”</p>

<h2 id="deeper-nesting">Deeper Nesting</h2>

<p>Both PHP and Node versions support nesting of folders under <code class="highlighter-rouge">patternSubtype</code>. For example, you may want to organize your <a href="/docs/pattern-documenting.html">pattern documentation</a>, pattern, Sass files and <a href="/docs/pattern-pseudo-patterns.html">pseudo-patterns</a> in one directory like so:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- molecules/
- blocks/
- media-block/
- media-block.md
- media-block.mustache
- media-block.scss
- media-block~variant1.json
- media-block~variant2.json
</code></pre></div></div>

<p>In this example the <code class="highlighter-rouge">media-block/</code> directory is ignored for the purposes of generating breadcrumbs and navigation in the Pattern Lab front-end but the documentation, pattern and pseudo-patterns are still rendered.</p>

<p>Folders can be nested under <code class="highlighter-rouge">media-block/</code> if desired but this is discouraged because of possible collisions when using the <a href="http://patternlab.io/docs/pattern-including.html">shorthand partial syntax</a>.</p>

  </div>